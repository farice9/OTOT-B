process.env.NODE_ENV = 'test';

import chai from 'chai';
import chaiHttp from 'chai-http';
import request from 'supertest';
import { app } from "../index.js";
import { expect } from 'chai';

// Configure chai
chai.use(chaiHttp);
chai.should();

let objId; // Need the _id generated by MongoDB for updating later on

describe ('POST api/workout/addWorkout', () => {
    it('Should create a new workout', (done) => {
        request(app).post('/api/workout/addWorkout')
            .send({ date: "2022-11-03", type:"cardio", duration: 120, description: "jogging"})
            .then((res) => {
                const body = res.body;
                res.should.have.status(201);
                expect(body).to.contain.property('message');
                done();
            })
            .catch((err) => done(err));
    });
    it('Should fail because of invalid input', (done) => {
        request(app).post('/api/workout/addWorkout')
            .send({ date: "2022-11-30", type:"stren", duration: -10, description: "jogging"})
            .then((res) => {
                const body = res.body;
                res.should.have.status(400);
                expect(body).to.contain.property('message');
                done();
            })
            .catch((err) => done(err));
    })
})


describe ('GET api/workout/getAllWorkout', () => {
    it('Should get a list of workouts', (done) => {
        request(app).get('/api/workout/getAllWorkout')
            .send()
            .then((res) => {
                const body = res.body;
                res.should.have.status(200);
                res.body.should.be.a('array');
                res.body.should.have.lengthOf(1);
                done();
            })
            .catch((err) => done(err));
    })
})

describe ('GET api/workout/getWorkoutByDate', () => {
    it('Should get a workout on specified date', (done) => {
        request(app).get('/api/workout/getWorkoutByDate/2022-11-03')
            .send()
            .then((res) => {
                res.should.have.status(200);
                res.body.should.be.a('array');
                const body = res.body[0];
                expect(body).to.contain.property('_id');
                expect(body).to.contain.property('date');
                expect(body).to.contain.property('type');
                expect(body).to.contain.property('duration');
                expect(body).to.contain.property('description');
                expect(body).property('date').to.include('2022-11-03');
                objId = body._id;
                done();
            })
            .catch((err) => done(err));
    })
})

describe ('GET api/workout/getWorkoutByType', () => {
    it('Should get a workout of a specific type', (done) => {
        request(app).get('/api/workout/getWorkoutByType/cardio')
            .send()
            .then((res) => {
                res.should.have.status(200);
                res.body.should.be.a('array');
                const body = res.body[0];
                expect(body).to.contain.property('_id');
                expect(body).to.contain.property('date');
                expect(body).to.contain.property('type');
                expect(body).to.contain.property('duration');
                expect(body).to.contain.property('description');
                expect(body).property('type').to.include('cardio');
                done();
            })
            .catch((err) => done(err));
    });
})

describe ('UPDATE api/workout/updateWorkout', () => {
    it('Should update the details of a workout', (done) => {
        request(app).put('/api/workout/updateWorkout')
            .send({_id: objId, date: "2022-11-04", type:"strength", duration: 60, description: "jogging at park"})
            .then((res) => {
                res.should.have.status(201);
                const body = res.body;
                expect(body).to.contain.property('message');
                expect(body).property('message').to.include('Workout details updated!');
                done();
            })
            .catch((err) => done(err));
    });
    it('Should fail at updating the details of a workout due to invalid input', (done) => {
        request(app).put('/api/workout/updateWorkout')
            .send({_id: objId, date: "2022-11-30", type:"strength", duration: -10, description: ""})
            .then((res) => {
                res.should.have.status(400);
                done();
            })
            .catch((err) => done(err));
    });
})

describe ('DELETE api/workout/deleteWorkout', () => {
    it('Should delete the specified workout record', (done) => {
        request(app).delete(`/api/workout/deleteWorkout/${objId}`)
            .send()
            .then((res) => {
                res.should.have.status(200);
                const body = res.body;
                expect(body).to.contain.property('message');
                expect(body).property('message').to.include('Workout record deleted');
                done();
            })
            .catch((err) => done(err));
    });
    it('Should not have any workout record left', (done) => {
        request(app).get('/api/workout/getAllWorkout')
            .send()
            .then((res) => {
                const body = res.body;
                res.should.have.status(200);
                res.body.should.be.a('array');
                res.body.should.have.lengthOf(0);
                done();
            })
            .catch((err) => done(err));        
    })
})